version: "3.8"
services:
  traefik:
    # Use the latest Traefik image
    image: traefik:2.9.6
    ports:
      - "25:25"
      - "80:80"
      - "443:443"
      - "587:587"
      - "5000:5000"
      - "8181:8181"
    deploy:
      placement:
        constraints:
          # Make the traefik service run only on the manager node,
          # as the node with it has the volume for the certificates
          - node.role == manager
          #- node.labels.traefik-public.traefik-public-certificates == true
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        # Middlewares can be re-used by other stacks in other Docker Compose files
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        - traefik.http.middlewares.https5000-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https5000-redirect.redirectscheme.port=5000
        - traefik.http.middlewares.https5000-redirect.redirectscheme.permanent=true
        - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_DASHBOARD_USERNAME?Variable not set}:${TRAEFIK_DASHBOARD_HASHED_PASSWORD?Variable not set}
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-dashboard-http.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-dashboard-http.entrypoints=http
        - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
        - traefik.http.routers.traefik-dashboard-https.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-dashboard-https.entrypoints=https
        - traefik.http.routers.traefik-dashboard-https.tls=true
        - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
        - traefik.http.routers.traefik-dashboard-https.service=api@internal
        - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth
        - traefik.http.services.traefik-dashboard-https.loadbalancer.server.port=8080
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --log.level=DEBUG
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --entrypoints.smtp.address=:25
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.smtptls.address=:587
      - --entrypoints.https5000.address=:5000
      - --entrypoints.grpc.address=:8181
      # Enable Docker Swarm mode
      - --providers.docker
      - --providers.docker.swarmmode
      - --providers.docker.exposedbydefault=false
      - --certificatesresolvers.le.acme.tlschallenge=true
      #- --certificatesresolvers.le.acme.tlschallenge.entrypoint=http
      - --certificatesresolvers.le.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL?Variable not set}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Allow to communicate with backend containers running https. https://stackoverflow.com/questions/49412376/internal-server-error-with-traefik-https-backend-on-port-443
      - --serverstransport.insecureskipverify=true
    networks:
      - traefik-public
      - default

  registry:
    restart: always
    image: registry:2.8.3
    volumes:
      - docker-registry:/var/lib/registry
    networks:
      - traefik-public
      - registry
    environment:
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    deploy:
      mode: 'global'
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.middlewares.registry-auth.basicauth.users=${REGISTRY_USERNAME}:${REGISTRY_HASHED_PASSWORD}
        - traefik.http.routers.registry-http.rule=Host(`${REGISTRY_DOMAIN?Variable not set}`)
        - traefik.http.routers.registry-http.entrypoints=http
        - traefik.http.routers.registry-http.middlewares=https5000-redirect
        - traefik.http.routers.registry-https.rule=Host(`${REGISTRY_DOMAIN?Variable not set}`)
        - traefik.http.routers.registry-https.entrypoints=https5000
        - traefik.http.routers.registry-https.tls=true
        - traefik.http.routers.registry-https.tls.certresolver=le
        - traefik.http.routers.registry-https.middlewares=registry-auth
        - traefik.http.services.registry.loadbalancer.server.port=5000

  registry-ui:
    image: joxit/docker-registry-ui:2.5.7
    environment:
      - DELETE_IMAGES=true
      - REGISTRY_TITLE=My Docker Registry
      - NGINX_PROXY_PASS_URL=http://registry:5000
      - SINGLE_REGISTRY=true
    networks:
      - traefik-public
      - registry
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.registry-ui-http.rule=Host(`registry.${DOMAIN}`)
        - traefik.http.routers.registry-ui-http.entrypoints=http
        - traefik.http.routers.registry-ui-http.middlewares=https-redirect
        - traefik.http.routers.registry-ui-https.rule=Host(`registry.${DOMAIN}`)
        - traefik.http.routers.registry-ui-https.entrypoints=https
        - traefik.http.routers.registry-ui-https.tls=true
        - traefik.http.routers.registry-ui-https.tls.certresolver=le
        - traefik.http.routers.registry-ui-https.middlewares=registry-auth
        - traefik.http.services.registry-ui.loadbalancer.server.port=80

  gateone:
    image: dezota/gateone
    networks:
      - traefik-public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.gateone-http.rule=Host(`shell.${DOMAIN?Variable not set}`)
        - traefik.http.routers.gateone-http.entrypoints=http
        - traefik.http.routers.gateone-http.middlewares=https-redirect
        - traefik.http.routers.gateone-https.rule=Host(`shell.${DOMAIN?Variable not set}`)
        - traefik.http.routers.gateone-https.entrypoints=https
        - traefik.http.routers.gateone-https.tls=true
        - traefik.http.routers.gateone-https.tls.certresolver=le
        - traefik.http.routers.gateone-https.middlewares=admin-auth
        - traefik.http.services.gateone.loadbalancer.server.port=8000
        - traefik.http.services.gateone.loadbalancer.server.scheme=https

  swarmpit:
    image: swarmpit/swarmpit:latest
    environment:
      - SWARMPIT_DB=http://db:5984
      - SWARMPIT_INFLUXDB=http://influxdb:8086
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - net
      - traefik-public
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1024M
        reservations:
          cpus: '0.25'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.swarmpit-http.rule=Host(`swarmpit.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmpit-http.entrypoints=http
        - traefik.http.routers.swarmpit-http.middlewares=https-redirect
        - traefik.http.routers.swarmpit-https.rule=Host(`swarmpit.${DOMAIN?Variable not set}`)
        - traefik.http.routers.swarmpit-https.entrypoints=https
        - traefik.http.routers.swarmpit-https.tls=true
        - traefik.http.routers.swarmpit-https.tls.certresolver=le
        - traefik.http.services.swarmpit.loadbalancer.server.port=8080

  db:
    image: couchdb:2.3.0
    volumes:
      - db-data:/opt/couchdb/data
    networks:
      - net
    deploy:
      resources:
        limits:
          cpus: '0.30'
          memory: 512M
        reservations:
          cpus: '0.15'
          memory: 256M
      placement:
        constraints:
          - node.role == manager

  influxdb:
    image: influxdb:1.8
    volumes:
      - influx-data:/var/lib/influxdb
    networks:
      - net
    deploy:
      resources:
        reservations:
          cpus: '0.3'
          memory: 128M
        limits:
          cpus: '0.6'
          memory: 512M
      placement:
        constraints:
          - node.role == manager

  agent:
    image: swarmpit/agent:latest
    environment:
      - DOCKER_API_VERSION=1.35
      - EVENT_ENDPOINT=http://swarmpit:8080/events
      - HEALTH_CHECK_ENDPOINT=http://swarmpit:8080/version
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - net
    deploy:
      mode: global
      labels:
        swarmpit.agent: 'true'
      resources:
        limits:
          cpus: '0.10'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  droppy:
    image: silverwind/droppy
    volumes:
      - droppy:/files
    networks:
      - traefik-public
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.droppy-http.rule=Host(`droppy.${DOMAIN?Variable not set}`)
        - traefik.http.routers.droppy-http.entrypoints=http
        - traefik.http.routers.droppy-http.middlewares=https-redirect
        - traefik.http.routers.droppy-https.rule=Host(`droppy.${DOMAIN?Variable not set}`)
        - traefik.http.routers.droppy-https.entrypoints=https
        - traefik.http.routers.droppy-https.tls=true
        - traefik.http.routers.droppy-https.tls.certresolver=le
        - traefik.http.services.droppy.loadbalancer.server.port=8989

  webserver:
    image: nginx:latest
    volumes:
      - droppy-public:/usr/share/nginx/html:ro
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.traefik-public-http.rule=Host(`web.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-http.entrypoints=http
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        - traefik.http.routers.traefik-public-https.rule=Host(`web.${DOMAIN?Variable not set}`)
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        - traefik.http.routers.traefik-public-https.tls.certresolver=le
        - traefik.http.services.traefik-public.loadbalancer.server.port=80
    networks:
      - traefik-public

  sso-mysql:
    image: mysql:5.7
    volumes:
      - sso-mysql-data:/var/lib/mysql
    networks:
      - sso
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak-db-password

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.3
    environment:
      - KC_DB=mysql
      - KC_DB_URL_HOST=sso-mysql
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_URL_PORT=3306
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak-db-password
      - KC_HOSTNAME=sso.${DOMAIN?Variable not set}
      - KC_PROXY=edge
      - KC_HEALTH_ENABLED="true"
      - KC_LOG_LEVEL=info
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USERNAME?Variable not set}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD?Variable not set}
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ready" ]
#      interval: 15s
#      timeout: 2s
#      retries: 15
    command: start
    networks:
      - sso
      - traefik-public
    depends_on:
      - sso-mysql
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.keycloak-http.rule=Host(`sso.${DOMAIN?Variable not set}`)
        - traefik.http.routers.keycloak-http.entrypoints=http
        - traefik.http.routers.keycloak-http.middlewares=https-redirect
        - traefik.http.routers.keycloak-https.rule=Host(`sso.${DOMAIN?Variable not set}`)
        - traefik.http.routers.keycloak-https.entrypoints=https
        - traefik.http.routers.keycloak-https.tls=true
        - traefik.http.routers.keycloak-https.tls.certresolver=le
        - traefik.http.services.keycloak.loadbalancer.server.port=8080

  # Docker-GC - Automatic Docker Garbage Collection 
  dockergc:
    image: clockworksoul/docker-gc-cron:0.3.4
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      CRON: 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: "Europe/Amsterdam"
    deploy:
      placement:
        constraints:
          - node.role == manager

volumes:
  db-data:
    driver: local

  influx-data:
    driver: local

  # Create a volume to store the certificates. Make sure there is a constraint to have
  # Traefik always deployed to the same Docker node with the same volume containing
  # the HTTPS certificates. (by default this is done my constraining Traefik to the
  # manager node, see above.
  traefik-public-certificates:
    driver: local

  docker-registry:
    external: true

  droppy:
    external: true

  droppy-public:
    external: true

  sso-mysql-data:
    driver: local

networks:
  # Use the previously created public network "traefik-public", shared with other
  # services that need to be publicly available via this Traefik
  traefik-public:
    external: true

  registry:
    driver: overlay
 
  net:
    driver: overlay
    attachable: true

  sso:
    driver: overlay
    attachable: true
